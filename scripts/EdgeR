#!/usr/bin/env Rscript

library(optparse)
library(limma)
library(edgeR)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(reshape2)


option_list <- list(
  make_option(c("-r", "--reads_table"), action = "store",
              help = "reads table generated from featureCounts"),
  make_option(c("-p", "--p_cutoff"), action = "store",
              help = "Pvalue cutoff", default = 0.05),
  make_option(c("-e", "--exp_desn"), action = "store",
              help = "experimental design file that contains information on groups"),
  make_option(c("-n", "--name"), action = "store",
              help = "name of feature from gff file that was chosen to represent each feature"),
  make_option(c("-o", "--out_dir"), action = "store",
              help = "an output directory where all outputs will be stored")
)

opt <- parse_args(OptionParser(option_list = option_list))

#
reads_file <- opt$reads_table
pcutoff <- opt$p_cutoff
feature_name <- opt$name
group_file <- opt$exp_desn
out_dir <- file.path(opt$out_dir, feature_name)

#==============================================================================#
# create the output directory
ifelse(!dir.exists(out_dir), dir.create(out_dir), print("already exist"))
#==============================================================================#

pair.comb <- function(exp_des){
    # Create pairwise comparisons to find DGEs
    # get all pariwise combination from experimental design file
    exp_desn <- read.table(exp_des, sep = "\t", header = TRUE, comment.char="",
                       )
    categories <- unique(exp_desn$Group)
    # pairs <- combn(categories, 2, simplify = FALSE)
    pairs <- subset(expand.grid(rep(list(categories),2), stringsAsFactors = F), Var1 != Var2)
    return(pairs)}
#==============================================================================#
# read the output of featureCounts
read_counts <- read.table(reads_file, sep = "\t", header = TRUE, comment.char = "#")
# read_counts_only <- read_counts[, -c(1:6)]
read_counts$total <- rowSums(read_counts[, -c(1:6)])
read_counts_non0 <- dplyr::filter(read_counts, total > 0)
read_counts_non0$total <- NULL
#==============================================================================#
# rename the column headers
names(read_counts_non0) <- gsub(".*mapping.", "", names(read_counts_non0),
                           perl = TRUE)
names(read_counts_non0) <- gsub("_srt.bam", "", names(read_counts_non0), perl = TRUE)

names(read_counts_non0) <- base::gsub("^.*[.]", "", names(read_counts_non0))
#==============================================================================#
# convert first column to row names
row.names(read_counts_non0) <- read_counts_non0[, 1]
#==============================================================================#
# get gene information
gene.info <- read_counts_non0[, c(1:6)]
#==============================================================================#
# read the experimental design file
group_table <- read.delim(group_file, colClasses=c("character"), comment.char="")
row.names(group_table) <- as.character(group_table[, 1])
group_table <- select(group_table, Group)
#==============================================================================#
#TODO: move this piece of code to separate R code so that its done everytime
#rearrange/clean the table and rewrite the column to display in EDGE
outfile <- paste(strsplit(reads_file ,".tsv"), "_sorted.csv", sep="")
read_counts_sort <- read_counts
col_len <- ncol(read_counts_sort)
read_counts_sort$sum <- rowSums(read_counts_sort[7:col_len])
read_counts_sort <- dplyr::arrange(read_counts_sort, desc(sum))
read_counts_sort$sum <- NULL
# read_counts_sort <- read_counts_sort[c(base::colnames(gene.info), base::row.names(group_table))]
write.csv(read_counts_sort, file=outfile )
#==============================================================================#
# Reformat summary files for EDGE display
summary_file <- paste(reads_file, ".summary", sep="")
summary_outfile <- paste(strsplit(reads_file ,".summary"), "_summary.csv", sep="")
summary.counts <- read.table(summary_file, sep = "\t", header = TRUE, comment.char = "#")
names(summary.counts) <- gsub(".*mapping.", "", names(summary.counts),
                           perl = TRUE)
names(summary.counts) <- gsub("_srt.bam", "", names(summary.counts), perl = TRUE)
names(summary.counts) <- base::gsub("^.*[.]", "", names(summary.counts))
summary.counts <- summary.counts[c("Status", base::row.names(group_table))]
summary.counts.t <- as.data.frame(t(summary.counts))
colnames(summary.counts.t) <- as.character(unlist(summary.counts.t[1,]))
summary.counts.t = summary.counts.t[-1, ]
write.csv(summary.counts.t, file = summary_outfile )
#==============================================================================#
if(nrow(read_counts_non0) < 2 ){
    print("Nothing was mapped to the feature!")
    } else {
# if(dim(read_counts.non0)[[1]] > 2 ){

    edger_dge <- edgeR::DGEList(counts = read_counts_non0[, -c(1:6)], group = group_table$Group,
                            remove.zeros = TRUE, genes = gene.info)
    
    # keep <- rowSums(cpm(edger_dge)>1) >= 2 # filtering genes that have cpm lower than 1 in 2 samples
    # edger_dge <- edger_dge[keep, , keep.lib.sizes=FALSE]
    print(edger_dge)

    if (0 %in% colSums(edger_dge$counts)) {
        print("One of the sample does not have any reads mapped to it, so no further analysis will be done!")
    } else {

        ############### calculate RPKM and CPM #########################################
        rpkm_results <- edgeR::rpkm(edger_dge)
        cpm_results <- edgeR::cpm(edger_dge)
        out_rpkm <- file.path(out_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_RPKM.csv", sep=""))
        out_cpm <- file.path(out_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_CPM.csv", sep=""))
        write.csv(rpkm_results, file = out_rpkm)
        write.csv(cpm_results, file = out_cpm)
        ################################################################################

        ################ histogram of count per million ################################
        hist_dir = file.path(out_dir, "histograms")
        ifelse(!dir.exists(hist_dir), dir.create(hist_dir), print("already exist"))
        out_cpm_hist_pdf <- file.path(hist_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_cpm_histogram.pdf", sep=""))
        out_cpm_hist_png <- file.path(hist_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_cpm_histogram.png", sep=""))
        cpm_results <- dplyr::filter_all(as.data.frame(cpm_results), any_vars(. > 1))
        cpm_data <- reshape2::melt(as.data.frame(cpm_results), variable.name="sample", value.name="CPM")
        cpm_hist <- ggplot(data = cpm_data, mapping = aes(x = CPM)) +
            theme_bw() + theme(axis.text.x=element_text(angle = -90, hjust = 0)) +
            geom_histogram(bins=50) + xlab("CPM") + ylab(feature_name) + facet_wrap(~sample)
        ggsave(out_cpm_hist_pdf, cpm_hist, device = "pdf")
        ggsave(out_cpm_hist_png, cpm_hist, device = "png")

        ################# boxplot of count per million ################################
        violin_dir = file.path(out_dir, "violin_plots")
        ifelse(!dir.exists(violin_dir), dir.create(violin_dir), print("already exist"))
        group_table2 <- add_rownames(group_table, "sample")
        cpm_data_boxplot <- merge(x=cpm_data, y=group_table2)
        out_cpm_violin_pdf <- file.path(violin_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_cpm_violin.pdf", sep=""))
        out_cpm_violin_png <- file.path(violin_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_cpm_violin.png", sep=""))
        cpm_violin <- ggplot(data = cpm_data_boxplot, mapping = aes(x=sample, y=CPM)) +  theme_bw() +
            geom_violin(aes(fill = factor(Group)))
        cpm_violin_group <- ggplot(data = cpm_data_boxplot, mapping = aes(x=Group, y=CPM)) +  theme_bw() +
            geom_violin(aes(fill = factor(Group)))

        ggsave(out_cpm_violin_pdf, cpm_violin, device = "pdf")
        ggsave(out_cpm_violin_png, cpm_violin, device = "png")

        ##############################histogram of rpkm ################################
        out_rpkm_hist_pdf <- file.path(hist_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_rpkm_histogram.pdf", sep=""))
        out_rpkm_hist_png <- file.path(hist_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_rpkm_histogram.png", sep=""))
        rpkm_results <- dplyr::filter_all(as.data.frame(rpkm_results), any_vars(. != 0))
        rpkm_data <- reshape2::melt(as.data.frame(rpkm_results), variable.name="sample", value.name="rpkm")
        rpkm_hist <- ggplot(data=rpkm_data, mapping=aes(x=rpkm)) +  theme_bw() +
            geom_histogram(bins=50) + xlab("rpkm") + ylab(feature_name) + facet_wrap(~sample)
        ggsave(out_rpkm_hist_pdf, rpkm_hist, device = "pdf")
        ggsave(out_rpkm_hist_png, rpkm_hist, device = "png")

        ##############################heatmap of rpkm ################################
        heat_dir = file.path(out_dir, "heatmaps")
        ifelse(!dir.exists(heat_dir), dir.create(heat_dir), print("already exist"))
        out_rpkm_heatmap_pdf <- file.path(heat_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_rpkm_heatmap.pdf", sep=""))
        out_rpkm_heatmap_png <- file.path(heat_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_rpkm_heatmap.png", sep=""))
        rpkm_results_sort <- rpkm_results
        rpkm_results_sort$sum <- rowSums(rpkm_results_sort)
        rpkm_results_sort <- dplyr::arrange(rpkm_results_sort, desc(sum))
        rpkm_results_sort$sum <- NULL
        if (nrow(rpkm_results_sort) > 99) {
            pheatmap(as.matrix(head(rpkm_results_sort, 100)), legend=TRUE, filename=out_rpkm_heatmap_pdf)
            pheatmap(as.matrix(head(rpkm_results_sort, 100)), legend=TRUE, filename=out_rpkm_heatmap_png)
        }
        else
        {
            pheatmap(as.matrix(rpkm_results_sort), legend=TRUE, filename=out_rpkm_heatmap_pdf)
            pheatmap(as.matrix(rpkm_results_sort), legend=TRUE, filename=out_rpkm_heatmap_png)
        }
        ################# boxplot of RPKM #############################################
        rpkm_data_boxplot <- merge(x=rpkm_data, y=group_table2)
        out_rpkm_violin_pdf <- file.path(violin_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_rpkm_violin.pdf", sep=""))
        out_rpkm_violin_png <- file.path(violin_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_rpkm_violin.png", sep=""))
        rpkm_violin <- ggplot(data = rpkm_data_boxplot, mapping = aes(x=sample, y=rpkm)) +  theme_bw() +
            geom_violin(aes(fill = factor(Group)))
        rpkm_violin_group <- ggplot(data = rpkm_data_boxplot, mapping = aes(x=Group, y=rpkm)) +  theme_bw() +
            geom_violin(aes(fill = factor(Group)))
        ggsave(out_rpkm_violin_pdf, rpkm_violin, device = "pdf")
        ggsave(out_rpkm_violin_png, rpkm_violin, device = "png")

        if (feature_name %in% c("CDS", "gene", "transcript", "NovelRegion")){
                keep <- rowSums(edgeR::cpm(edger_dge)) >= nrow(group_table)
                edger_dge <- edger_dge[keep, ]
                if (nrow(edger_dge$counts) < 10 ) {
                    print("Not enough data to calculate dispersion factors!")
                } else {
                    # recompute library size after filtering
                    edger_dge$samples$lib.size <- colSums(edger_dge$counts)
                    # calculate the normalization factors for the library size
                    edger_dge <- edgeR::calcNormFactors(edger_dge, method = "TMM")
                    # estimate the dispersion for all read counts across all samples
                    edger_dge <- edgeR::estimateDisp(edger_dge, design.robust = TRUE)

                    # plot MDS
                    out_mds_hist_pdf <- file.path(out_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_MDS.pdf", sep=""))
                    out_mds_hist_png <- file.path(out_dir, paste(strsplit(basename(reads_file), ".tsv")[[1]], "_MDS.png", sep=""))
                    pdf(out_mds_hist_pdf)
                    limma::plotMDS(edger_dge, top = 1000, labels = edger_dge$sample$X.SampleID,
                           main = "edgeR MDS Plot")
                    dev.off()
                    png(out_mds_hist_png)
                    limma::plotMDS(edger_dge, top = 1000, labels = edger_dge$sample$X.SampleID,
                           main = "edgeR MDS Plot")
                    dev.off()

                # get all possible pairs
                all_pairs <- pair.comb(group_file)

            for (n in 1:length(all_pairs) ) {
                # folders for each comparisons
                DE_dir = out_dir
                # DE_dir = file.path(out_dir, paste(all_pairs[[n]][1], all_pairs[[n]][2], sep = "_vs_"))
                ifelse(!dir.exists(DE_dir), dir.create(DE_dir), print("already exist"))
                # filename strings for each comparisons
                # r_fn <- strsplit(basename(reads_file), ".tsv")[[1]]
                filename <- paste(all_pairs[[n]][1], "over", all_pairs[[n]][2],
                                  feature_name, "et.csv", sep = "__")
                filename_sig <- paste(all_pairs[[n]][1], "over", all_pairs[[n]][2],
                                      feature_name,"sig.csv", sep = "__")

                # sample matrix
                pair1 <- as.character(all_pairs[[n]][1])
                pair2 <- as.character(all_pairs[[n]][2])
                pairs <- c(pair1, pair2)

                      # exact test
                edger_et <- edgeR::exactTest(edger_dge, pair = pairs)
                edger_et_table <- edgeR::topTags(edger_et, n = nrow( edger_et$table ), sort.by = "PValue" )$table
                edger_et_sigtable <-  subset(edger_et_table, FDR < pcutoff)
                       
                # write summary table
                print("Writing summary file")
                out_file_summ <- file.path(DE_dir, paste(all_pairs[[n]][2], "over", all_pairs[[n]][1], feature_name, "summary.csv", sep = "__"))
                summ_table <- summary(decideTests(edger_et))
                colnames(summ_table) <- paste(colnames(summ_table), feature_name, sep="_")
                write.csv(t(summ_table), out_file_summ)
                # plot
                md_plot_dir = file.path(DE_dir, "md_plots")
                ifelse(!dir.exists(md_plot_dir), dir.create(md_plot_dir), print("already exist"))
                out_md_pdf <- file.path(md_plot_dir, paste(
                    all_pairs[[n]][1], "over", all_pairs[[n]][2], feature_name, "MD.pdf", sep = "__"))
                out_md_png <- file.path(md_plot_dir, paste(
                    all_pairs[[n]][1], "over", all_pairs[[n]][2], feature_name, "MD.png", sep = "__"))
                pdf(out_md_pdf)
                plotMD(edger_et)
                dev.off()
                png(out_md_png)
                plotMD(edger_et)
                dev.off()
                # full path to output directory
                out_table <- file.path(DE_dir, filename)
                out_table_sig <- file.path(DE_dir, filename_sig)

                # write the file
                write.csv(edger_et_table, out_table)
                write.csv(edger_et_sigtable, out_table_sig)
                    }
                }
            }
        }
    }
# else {
#         print "No reads were mapped to feature, so no other analysis will be done!"
#             }
