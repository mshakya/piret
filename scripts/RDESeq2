#!/usr/bin/env Rscript

library(optparse)
library(DESeq2)
library(dplyr)
library(ggplot2)
library(pheatmap)
library(GenomicRanges)

option_list <- list(
  make_option(c("-r", "--reads_table"), action = "store",
              help = "reads table generated from featureCounts"),
  make_option(c("-p", "--p_cutoff"), action = "store",
              help = "Pvalue cutoff", default = 0.05),
  make_option(c("-e", "--exp_desn"), action = "store",
              help = "experimental design file that contains information on groups"),
  make_option(c("-n", "--name"), action = "store",
              help = "name of feature from gff file that was chosen to represent each feature"),
  make_option(c("-o", "--out_dir"), action = "store",
              help = "an output directory where all outputs will be stored")
)

opt <- parse_args(OptionParser(option_list = option_list))

reads_file <- opt$reads_table
pcutoff <- opt$p_cutoff
group_file <- opt$exp_desn
feature_name <- opt$name
#==============================================================================#
# create the output directory
ifelse(!dir.exists(opt$out_dir), dir.create(opt$out_dir), print("already exist"))
#==============================================================================#
out_dir <- file.path(opt$out_dir, feature_name)

#==============================================================================#
# create the output directory
ifelse(!dir.exists(out_dir), dir.create(out_dir), print("already exist"))
#=============================================================================#
# Create pairwise comparisons to find DGEs
pair.comb <- function(exp_des){
        # get all pariwise combination from experimental design file
        exp_desn <- read.table(exp_des, sep = "\t", header = TRUE,
                               comment.char = "", colClasses=c("character"))
        categories <- unique(exp_desn$Group)
        # pairs <- combn(categories, 2, simplify = FALSE)
        pairs <- subset(expand.grid(rep(list(categories),2), stringsAsFactors = F), Var1 != Var2)
        return(pairs)
    }
#=============================================================================#

DESeq2_summary <- function(object, alpha, pair1, pair2, feature_name, outdir){

    if (missing(alpha)) {
        alpha <- if (is.null(S4Vectors::metadata(object)$alpha)) {
            0.1
        }
        else {
            S4Vectors::metadata(object)$alpha
        }
    }

    base::ifelse(!base::dir.exists(outdir),
                 base::dir.create(outdir),
                 print("already exist"))
    notallzero <- sum(object$baseMean > 0)
    up <- sum(object$padj < alpha & object$log2FoldChange > 0,
              na.rm = TRUE)
    down <- sum(object$padj < alpha & object$log2FoldChange <
                    0, na.rm = TRUE)
    not_sig = notallzero - up - down
    summ_table <- data.frame(Down = down,
                             NotSig = not_sig, Up = up)
    summ_file <- file.path(outdir, paste(pair1, "over", pair2, feature_name,
                                         "summary.csv", sep = "__"))
    write.csv(summ_table, summ_file, row.names = c(paste(pair1, pair2,
                                                         feature_name, sep="+")) )
    return(summ_table)
}

#=============================================================================#
    read_counts <- utils::read.table(reads_file, sep = "\t", header = TRUE, check.names=FALSE)
    names(read_counts) <- base::gsub(".*mapping.", "",
                                     names(read_counts),
                                     perl = TRUE)
    names(read_counts) <- base::gsub("_srt.bam", "", names(read_counts), perl = TRUE)
    names(read_counts) <- base::gsub("^.*[./]", "", names(read_counts))
    read_counts$total <- rowSums(read_counts[, -c(1:6)])
    read_counts.non0 <- dplyr::filter(read_counts, total > 0)
    gene_info <- read_counts.non0[, c(1:6)]
    read_counts.non0$total <- NULL # remove total column
    # convert first column to row names
    row.names(read_counts.non0) <- read_counts.non0[, 1]
    #read in the table with group info
    group_table <- utils::read.table(group_file, colClasses = c("character"),
                                     comment.char = "#", row.names = 1,
                                     sep = "\t", header = FALSE)
    colnames(group_table) <- c("Files", "Group")
    read_counts.non0 <- read_counts.non0[, rownames(group_table)]
    group_table <- dplyr::select(group_table, Group)
    
    # count 0s
    check_zero = apply(read_counts.non0, 1, function(x) sum(x == 0))
    check = all(lapply(check_zero, function(x) x > 0))
    if (check[[1]]) {
        warning("every gene contains at least one zero, cannot compute log geometric means, wont calculate metrices.")
    } else{

    deseq_ds <- DESeq2::DESeqDataSetFromMatrix(countData = read_counts.non0,
                                              colData = group_table,
                                              design = ~ Group,
                                              tidy = FALSE)
    featureData <- data.frame(basepairs = gene_info$Length)
    S4Vectors::mcols(deseq_ds) <- S4Vectors::DataFrame(S4Vectors::mcols(deseq_ds),
                                            featureData)
    # remove genes without any counts
    deseq_ds <- deseq_ds[base::rowSums(DESeq2::counts(deseq_ds)) > 0, ]
#=============================================================================#
#   fpkm table
    # count the number of 0s
    # check_zero = apply(read_counts, 1, function(x) sum(x == 0))
    check = all(lapply(check_zero, function(x) x > 0))
    # if (check[[1]]) {
        # warning("every gene contains at least one zero, cannot compute log geometric means")
    # } else {
#=============================================================================#
        fpkm_results <- DESeq2::fpkm(deseq_ds, robust=TRUE)
        print(head(fpkm_results))
        out_fpkm <- base::file.path(out_dir,
                                base::paste(base::strsplit(base::basename(reads_file),
                                                           ".tsv")[[1]],
                                            "_FPKM.csv", sep=""))

        utils::write.csv(fpkm_results, file = out_fpkm, row.names = TRUE)
#=============================================================================#
        fpm_results <- DESeq2::fpm(deseq_ds, robust=TRUE)
        out_fpm <- base::file.path(out_dir,
                                base::paste(base::strsplit(base::basename(reads_file),
                                                           ".tsv")[[1]],
                                            "_FPM.csv", sep=""))
        utils::write.csv(fpm_results, file = out_fpm, row.names = TRUE)
#=============================================================================#
        fpkm_results <- utils::read.csv(out_fpkm, row.names = 1)
        fpkm_heatmap_pdf <- file.path(out_dir,
                                      paste(strsplit(basename(out_fpkm), ".csv")[[1]],
                                            "_heatmap.pdf", sep=""))
        fpkm_heatmap_png <- file.path(out_dir,
                                      paste(strsplit(basename(out_fpkm), ".csv")[[1]],
                                            "_heatmap.png", sep=""))
        if (nrow(fpkm_results) > 99 ) {
            fpkm_results$means <- rowMeans(fpkm_results)
            fpkm_results_sort <- dplyr::arrange(fpkm_results, desc(means))
            fpkm_results_sort$means <- NULL
            fpkm_results$means <- NULL
            pheatmap::pheatmap(as.matrix(head(fpkm_results_sort, 100)), legend=TRUE, filename = fpkm_heatmap_pdf)
            pheatmap::pheatmap(as.matrix(head(fpkm_results_sort, 100)), legend=TRUE, filename = fpkm_heatmap_png)

        } 
        else{
            pheatmap::pheatmap(as.matrix(fpkm_results), legend=TRUE, filename = fpkm_heatmap_pdf)
            pheatmap::pheatmap(as.matrix(fpkm_results), legend=TRUE, filename = fpkm_heatmap_png)
        }

        violin_pdf <- file.path(out_dir,
                               paste(strsplit(basename(out_fpkm), ".csv")[[1]],
                                     "_violin.pdf", sep = ""))
        violin_png <- file.path(out_dir,
                               paste(strsplit(basename(out_fpkm), ".csv")[[1]],
                                     "_violin.png", sep = ""))
        df_results <- dplyr::filter_all(as.data.frame(fpkm_results), dplyr::any_vars(. != 0))
        f_data <- reshape2::melt(as.data.frame(df_results),
                             variable.name = "sample", value.name = "FPKM")
        group_table <- read.delim(group_file, row.names = 1)
        group_table <- dplyr::select(group_table, "Group")
        
        group_table2 <- tibble::rownames_to_column(group_table, "sample")
        f_data_boxplot <- merge(x = f_data, y = group_table2)
        f_violin <- ggplot2::ggplot(data = f_data_boxplot, mapping = ggplot2::aes_string(x = "Group", y = "FPKM")) +
        ggplot2::theme_bw() + ggplot2::geom_violin(ggplot2::aes(fill = factor(Group)))
        ggplot2::ggsave(violin_pdf, f_violin, device = "pdf")
        ggplot2::ggsave(violin_png, f_violin, device = "png")
#=============================================================================#
        fpm_results <- utils::read.csv(out_fpm, row.names = 1)
        fpm_heatmap_pdf <- file.path(out_dir,
                                      paste(strsplit(basename(out_fpm), ".csv")[[1]],
                                            "_heatmap.pdf", sep=""))
        fpm_heatmap_png <- file.path(out_dir,
                                      paste(strsplit(basename(out_fpm), ".csv")[[1]],
                                            "_heatmap.png", sep=""))
         if (nrow(fpm_results) > 99 ) {
            fpm_results$means <- rowMeans(fpm_results)
            fpm_results_sort <- dplyr::arrange(fpm_results, desc(means))
            fpm_results_sort$means <- NULL
            fpm_results$means <- NULL
            pheatmap::pheatmap(as.matrix(head(fpm_results_sort, 100)), legend=TRUE, filename = fpm_heatmap_pdf)
            pheatmap::pheatmap(as.matrix(head(fpm_results_sort, 100)), legend=TRUE, filename = fpm_heatmap_png)

        } 
        else{
            pheatmap::pheatmap(as.matrix(fpm_results), legend=TRUE, filename = fpm_heatmap_pdf)
            pheatmap::pheatmap(as.matrix(fpm_results), legend=TRUE, filename = fpm_heatmap_png)
        }


        violin_pdf <- file.path(out_dir,
                               paste(strsplit(basename(out_fpm), ".csv")[[1]],
                                     "_violin.pdf", sep = ""))
        violin_png <- file.path(out_dir,
                               paste(strsplit(basename(out_fpm), ".csv")[[1]],
                                     "_violin.png", sep = ""))
        df_results <- dplyr::filter_all(as.data.frame(fpm_results), dplyr::any_vars(. != 0))
        f_data <- reshape2::melt(as.data.frame(df_results),
                             variable.name = "sample", value.name = "FPM")
        group_table <- read.delim(group_file, row.names = 1)
        group_table <- dplyr::select(group_table, "Group")
        
        group_table2 <- tibble::rownames_to_column(group_table, "sample")
        f_data_boxplot <- merge(x = f_data, y = group_table2)
        f_violin <- ggplot2::ggplot(data = f_data_boxplot, mapping = ggplot2::aes_string(x = "Group", y = "FPM")) +
        ggplot2::theme_bw() + ggplot2::geom_violin(ggplot2::aes(fill = factor(Group)))
        ggplot2::ggsave(violin_pdf, f_violin, device = "pdf")
        ggplot2::ggsave(violin_png, f_violin, device = "png")
#=============================================================================#
    dds <- DESeq2::DESeq(deseq_ds)
    pca_pdf <- file.path(out_dir,
                         paste(strsplit(basename(reads_file), ".tsv")[[1]],
                               "_PCA.pdf", sep = ""))
    pca_png <- file.path(out_dir,
                         paste(strsplit(basename(reads_file), ".tsv")[[1]],
                               "_PCA.png", sep = ""))

    dds_vts <- DESeq2::varianceStabilizingTransformation(dds)
    pca <- DESeq2::plotPCA(dds_vts, intgroup = c("Group"))
    ggplot2::ggsave(pca_pdf, pca, device = "pdf")
    ggplot2::ggsave(pca_png, pca, device = "png")
#=============================================================================#
    df <- utils::read.csv(out_fpm, row.names = 1)
    histogram_pdf <- file.path(out_dir,
                                 paste(strsplit(basename(out_fpm), ".csv")[[1]],
                                       "_histogram.pdf", sep=""))
    histogram_png <- file.path(out_dir,
                                 paste(strsplit(basename(out_fpm), ".csv")[[1]],
                                       "_histogram.png", sep=""))

    df_results <- dplyr::filter_all(as.data.frame(df), dplyr::any_vars(. != 0))
    f_data <- reshape2::melt(as.data.frame(df_results), variable.name="sample", value.name="FPM")
    f_hist <- ggplot2::ggplot(data = f_data, mapping = ggplot2::aes_string(x = "FPM")) +  ggplot2::theme_bw() +
             ggplot2::geom_histogram(bins=100) + ggplot2::xlab("FPM") + ggplot2::ylab(feature_name) + ggplot2::facet_wrap(~sample)
    ggplot2::ggsave(histogram_pdf, f_hist, device = "pdf")
    ggplot2::ggsave(histogram_png, f_hist, device = "png")
#=============================================================================#
    df <- utils::read.csv(out_fpkm, row.names = 1)
    histogram_pdf <- file.path(out_dir,
                                 paste(strsplit(basename(out_fpkm), ".csv")[[1]],
                                       "_histogram.pdf", sep=""))
    histogram_png <- file.path(out_dir,
                                 paste(strsplit(basename(out_fpkm), ".csv")[[1]],
                                       "_histogram.png", sep=""))

    df_results <- dplyr::filter_all(as.data.frame(df), dplyr::any_vars(. != 0))
    f_data <- reshape2::melt(as.data.frame(df_results), variable.name="sample", value.name="FPKM")
    f_hist <- ggplot2::ggplot(data = f_data, mapping = ggplot2::aes_string(x = "FPKM")) +  ggplot2::theme_bw() +
             ggplot2::geom_histogram(bins=100) + ggplot2::xlab("FPKM") + ggplot2::ylab(feature_name) + ggplot2::facet_wrap(~sample)
    ggplot2::ggsave(histogram_pdf, f_hist, device = "pdf")
    ggplot2::ggsave(histogram_png, f_hist, device = "png")

    }

if (feature_name %in% c("CDS", "gene", "transcript", "exon", "NovelRegion")){
    if (check[[1]]) {
        warning("every gene contains at least one zero, cannot compute log geometric means, wont calculate metrices.")
    } 
    else {

    # calculate size factors
    dds <- DESeq2::DESeq(deseq_ds)
    # get all possible pairs
    all_pairs <- pair.comb(group_file)

    for (n in 1:nrow(all_pairs) ) {
        # folders for each comparisons
        DE_dir = out_dir
        # DE_dir = file.path(out_dir, paste(all_pairs[[n]][1], all_pairs[[n]][2], sep = "_vs_"))
        ifelse(!dir.exists(DE_dir), dir.create(DE_dir), print("already exist"))
        # filename strings for each comparisons
        f1 <- all_pairs[n, 1]
        f2 <- all_pairs[n, 2]
        # filename <- paste(all_pairs[[n]][1], all_pairs[[n]][2], feature_name, "et.csv", sep = "__")
        filename <- paste(f1, "over", f2, feature_name, "et.csv", sep = "__")
        # filename_sig <- paste(all_pairs[[n]][1], all_pairs[[n]][2], feature_name, "sig.csv", sep = "__")
        filename_sig <- paste(f1, "over", f2, feature_name, "sig.csv", sep = "__")        
        # sample matrix
        # pair1 <- as.character(all_pairs[[n]][1])
        pair1 <- as.character(f1)
        # pair2 <- as.character(all_pairs[[n]][2])
        pair2 <- as.character(all_pairs[n, 2])
        pairs <- c(pair1, pair2)
        # exact test
        deseq_diff <- DESeq2::results(dds, contrast = c("Group", pair1, pair2))
        summ <- DESeq2::summary.DESeqResults(deseq_diff)
        deseq_diff <- deseq_diff[order(as.numeric(deseq_diff$pvalue)),]
        deseq_sig <- subset(deseq_diff, padj < as.numeric(pcutoff))

        #plot
        # out_ma_pdf <- file.path(DE_dir, paste(all_pairs[[n]][1], all_pairs[[n]][2], feature_name, "MA.pdf", sep = "__"))
        out_ma_pdf <- file.path(DE_dir, paste(f1, "over", f2, feature_name, "MA.pdf", sep = "__"))
        pdf(out_ma_pdf)
        plotMA(deseq_diff)
        dev.off()
        # out_ma_png <- file.path(DE_dir, paste(all_pairs[[n]][1], all_pairs[[n]][2], feature_name, "MA.png", sep = "__"))
        out_ma_png <- file.path(DE_dir, paste(f1, "over", f2, feature_name, "MA.png", sep = "__"))
        png(out_ma_png)
        plotMA(deseq_diff)
        dev.off()

        DESeq2_summary(object = deseq_diff, alpha = as.numeric(pcutoff),
                    pair1 = pair1, pair2 = pair2, feature_name = feature_name,
                    outdir = DE_dir)

        # full path to output directory
        out_table <- file.path(DE_dir, filename)
        out_table_sig <- file.path(DE_dir, filename_sig)

        # write the file
        write.csv(deseq_diff, out_table)
        write.csv(deseq_sig, out_table_sig)

    } 
# }
    }
}
#TODO: Need to make sure that all gff lines have IDs
